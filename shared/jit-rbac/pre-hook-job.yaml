apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-jit-rbac-presync-prepare
  namespace: kube-system
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,HookFailed
    argocd.argoproj.io/sync-wave: "-2"
  labels:
    app.kubernetes.io/part-of: argo-jit-rbac
    jit-rbac/app: PLACEHOLDER
    jit-rbac/service: PLACEHOLDER
spec:
  backoffLimit: 0
  activeDeadlineSeconds: 180
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: argo-jit-rbac
        jit-rbac/app: PLACEHOLDER
        jit-rbac/service: PLACEHOLDER
    spec:
      serviceAccountName: argocd-manager
      restartPolicy: Never
      terminationGracePeriodSeconds: 10
      containers:
      - name: presync-prepare
        image: bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: JIT_RBAC_APP
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['jit-rbac/app']
        - name: JIT_RBAC_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['jit-rbac/service']
        command: ["/bin/sh","-lc"]
        args:
          - |
            set -euo pipefail
            ROLE_NAME="argocd-manager-${JIT_RBAC_SERVICE}"
            echo "PreSync prepare for app=${JIT_RBAC_APP} service=${JIT_RBAC_SERVICE} role=${ROLE_NAME}";

            echo "Ensuring ClusterRole exists with empty rules";
            if ! kubectl get clusterrole "${ROLE_NAME}" >/dev/null 2>&1; then
              kubectl apply -f - <<EOF
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              name: ${ROLE_NAME}
              labels:
                app.kubernetes.io/part-of: argo-jit-rbac
                jit-rbac/app: ${JIT_RBAC_APP}
                jit-rbac/service: ${JIT_RBAC_SERVICE}
            rules: []
            EOF
            else
              kubectl patch clusterrole "${ROLE_NAME}" --type=merge -p '{"metadata":{"labels":{"app.kubernetes.io/part-of":"argo-jit-rbac","jit-rbac/app":"'"${JIT_RBAC_APP}"'","jit-rbac/service":"'"${JIT_RBAC_SERVICE}"'"}},"rules":[]}' || true
            fi

            echo "Upserting temporary ClusterRoleBinding"
            kubectl apply -f - <<EOF
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: ${ROLE_NAME}
              labels:
                app.kubernetes.io/part-of: argo-jit-rbac
                jit-rbac/app: ${JIT_RBAC_APP}
                jit-rbac/service: ${JIT_RBAC_SERVICE}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: ${ROLE_NAME}
            subjects:
              - kind: ServiceAccount
                name: argocd-manager
                namespace: kube-system
            EOF
            echo "PreSync prepare done"

