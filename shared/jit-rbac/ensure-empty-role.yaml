apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-jit-rbac-ensure-empty-role
  namespace: kube-system
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,HookFailed
    argocd.argoproj.io/sync-wave: "-4"
  labels:
    app.kubernetes.io/part-of: argo-jit-rbac
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 60
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: argo-jit-rbac
        jit-rbac/app: PLACEHOLDER
    spec:
      serviceAccountName: argocd-manager
      restartPolicy: Never
      containers:
      - name: ensure-empty-role
        image: bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: JIT_RBAC_APP
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['jit-rbac/app']
        - name: ROLE_NAME
          value: "ROLE_NAME_PLACEHOLDER"
        command: ["/bin/sh", "-c"]
        args:
          - |
            set -e
            echo "=== JIT RBAC PreSync: Ensure empty ClusterRole exists ===";
            echo "Application: ${JIT_RBAC_APP}";
            echo "Role: ${ROLE_NAME}";

            if ! kubectl get clusterrole "${ROLE_NAME}" >/dev/null 2>&1; then
              echo "Creating empty ClusterRole ${ROLE_NAME}";
              kubectl apply -f - <<EOF
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRole
              metadata:
                name: ${ROLE_NAME}
                labels:
                  app.kubernetes.io/part-of: argo-jit-rbac
                  jit-rbac/type: patchable
                  jit-rbac/app: ${JIT_RBAC_APP}
              rules: []
              EOF
            else
              echo "ClusterRole ${ROLE_NAME} already exists";
            fi

            echo "Ensure empty ClusterRole step completed";

