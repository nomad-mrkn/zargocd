apiVersion: batch/v1
kind: CronJob
metadata:
  name: argocd-jit-rbac-cleanup-cron
  namespace: kube-system
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  schedule: "*/15 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      ttlSecondsAfterFinished: 900
      template:
        metadata:
          labels:
            app.kubernetes.io/part-of: argo-jit-rbac-cron
        spec:
          serviceAccountName: argocd-manager
          restartPolicy: Never
          containers:
          - name: cleanup
            image: bitnami/kubectl:latest
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh", "-c"]
            args:
              - |
                echo "=== JIT RBAC Cleanup Cron Job ===";
                echo "Starting cleanup at $(date)";
                
                echo "Checking for temporary ClusterRoleBindings...";
                CRBS=$(kubectl get clusterrolebinding -l app.kubernetes.io/part-of=argo-jit-rbac -o name 2>/dev/null || echo "");
                if [ -n "$CRBS" ]; then
                  echo "Found temporary CRBs:";
                  echo "$CRBS";
                  kubectl delete clusterrolebinding -l app.kubernetes.io/part-of=argo-jit-rbac --ignore-not-found=true;
                  echo "Deleted temporary CRBs";
                else
                  echo "No temporary CRBs found";
                fi
                
                echo "Checking for patchable ClusterRoles with non-empty rules...";
                ROLES=$(kubectl get clusterrole -l jit-rbac/type=patchable -o json 2>/dev/null | jq -r '.items[] | select(.rules | length > 0) | .metadata.name' || echo "");
                if [ -n "$ROLES" ]; then
                  echo "Found ClusterRoles with rules (clearing them):";
                  echo "$ROLES";
                  for role_name in $ROLES; do
                    echo "Clearing ClusterRole: $role_name";
                    kubectl patch clusterrole "$role_name" --type=merge -p '{"rules":[]}' --ignore-not-found=true;
                  done
                  echo "Cleared patchable ClusterRoles";
                else
                  echo "No patchable ClusterRoles with rules found";
                fi
                
                echo "Checking for old cleanup pods...";
                kubectl delete pod -n kube-system -l app.kubernetes.io/part-of=argo-jit-rbac --field-selector=status.phase=Succeeded --ignore-not-found=true || true;
                kubectl delete pod -n kube-system -l app.kubernetes.io/part-of=argo-jit-rbac-cron --field-selector=status.phase=Succeeded --ignore-not-found=true || true;
                
                echo "Cleanup completed at $(date)";