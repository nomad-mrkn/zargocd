apiVersion: batch/v1
kind: CronJob
metadata:
  name: argocd-jit-rbac-cleanup-cron
  namespace: kube-system
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      ttlSecondsAfterFinished: 900
      template:
        metadata:
          labels:
            app.kubernetes.io/part-of: argo-jit-rbac-cron
        spec:
          serviceAccountName: argocd-manager
          restartPolicy: Never
          containers:
          - name: cleanup
            image: bitnami/kubectl:latest
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh", "-c"]
            args:
              - |
                set -euo pipefail
                echo "Starting at $(date -u +%FT%TZ)"

                AGE_THRESHOLD_MIN=${AGE_THRESHOLD_MIN:-15}
                WATCHER="argocd-manager-watcher"
                now_epoch=$(date -u +%s)

                kubectl get clusterrolebinding -l app.kubernetes.io/part-of=argo-jit-rbac \
                  -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.metadata.creationTimestamp}{"\t"}{.roleRef.name}{"\n"}{end}' 2>/dev/null |
                while IFS=$'\t' read -r crb_name crb_ct role_name; do
                  [ -z "${crb_name}" ] && continue
                  [ "${crb_name}" = "${WATCHER}" ] && continue
                  [ "${role_name}" = "${WATCHER}" ] && continue

                  crb_epoch=$(date -u -d "${crb_ct}" +%s 2>/dev/null || echo 0)
                  [ "${crb_epoch}" = "0" ] && continue
                  age_min=$(( (now_epoch - crb_epoch) / 60 ))

                  if [ ${age_min} -ge ${AGE_THRESHOLD_MIN} ]; then
                    RULES_VAL=$(kubectl get clusterrole "${role_name}" -o jsonpath='{.rules}' 2>/dev/null || echo "")
                    if [ "${RULES_VAL}" = "[]" ] || [ -z "${RULES_VAL}" ]; then
                      timeout 30 kubectl delete clusterrolebinding "${crb_name}" --ignore-not-found=true --force --grace-period=0 || true
                    else
                      continue
                    fi
                  fi
                done

                timeout 30 kubectl delete pod -n kube-system -l app.kubernetes.io/part-of=argo-jit-rbac --field-selector=status.phase=Succeeded --ignore-not-found=true --force --grace-period=0 || true
                timeout 30 kubectl delete pod -n kube-system -l app.kubernetes.io/part-of=argo-jit-rbac-cron --field-selector=status.phase=Succeeded --ignore-not-found=true --force --grace-period=0 || true
                echo "Completed at $(date -u +%FT%TZ)"